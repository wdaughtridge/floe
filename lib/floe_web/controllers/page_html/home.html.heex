<div class="preference">
  <label for="token" class="mr-2">Stream Token:</label>
  <input type="text" class="rounded-lg" name="token" id="token" />
  <button
    id="cam"
    class="rounded-lg bg-zinc-100 ml-2 px-5 py-2 hover:bg-zinc-200/80"
    onClick="startRtcWhep()"
  >
    Join
  </button>
</div>
<br>
<div id="media"></div>

<script>
let rtc = new RTCPeerConnection();

const byId = (id) => document.getElementById(id);

async function startRtcWhep() {
    rtc.ontrack = (e) => {
        const track = e.track;
        const domId = `media-${track.id}`;
        const el = document.createElement('video');

        if (byId(domId)) {
            return;
        }

        el.id = domId;
        el.controls = true;
        el.autoplay = true;
        el.width = 720;

        byId('media').appendChild(el);

        setTimeout(() => {
            const media = new MediaStream();
            media.addTrack(track);
            el.srcObject = media;
        }, 1);
    };

    rtc.onicegatheringstatechange = () => console.log("Gathering state change: " + rtc.iceGatheringState);
    rtc.onconnectionstatechange = () => console.log("Connection state change: " + rtc.connectionState);

    rtc.addTransceiver("video", {
        direction: "recvonly"
    });
    rtc.addTransceiver("audio", {
        direction: "recvonly"
    });

    const offer = await rtc.createOffer();

    rtc.setLocalDescription(offer);

    const queryString = window.location.search;
    const urlParams = new URLSearchParams(queryString);
    const stream_id = urlParams.get('stream_id');

    const token = byId("token").value;
    const bearer = `Bearer ${token}`;

    const res = await fetch(`/api/whep?stream_id=${stream_id}`, {
        credentials: 'include',
        method: 'POST',
        headers: {
            'Content-Type': 'application/sdp',
            'Accept': 'application/sdp',
            'Authorization': bearer,
        },
        body: offer.sdp,
    });

    const answer = await res.text();

    rtc.setRemoteDescription({
        type: 'answer',
        sdp: answer
    });
}
</script>
